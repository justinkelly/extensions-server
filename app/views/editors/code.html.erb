<!DOCTYPE html>
<html>
<head>
  <%= stylesheet_link_tag 'codemirror' %>
  <%= javascript_include_tag 'codemirror' %>
  <%= javascript_include_tag 'loadmode' %>
  <%= javascript_include_tag 'cm-meta' %>
  <style>

  body, html {
    font-family: sans-serif;
    font-size: 16px;
    height: 100%;
  }

  #wrapper {
    display: flex;
    flex-direction: column;
    position: relative;
    height: 100%;
  }

  .CodeMirror {
    flex: 1 1 auto;
    width: 100%;
    height: 100%;
    resize: none;
    font-size: 16px;
    border-radius: 4px;
    padding: 15px;
    font-family: monospace;
    padding: 0;
  }

  #select-wrapper {
    width: 100%;
    margin: 0;
    padding-left: 16px;
    background-color: rgb(247, 247, 247);
    border-top: 1px solid rgb(221, 221, 221);
  }

  #language-label {
    font-size: 12px;
  }

  #select {
    margin: 5px;
  }

  </style>

  <script>

    var isDemo = "<%= params['action'] %>" == "code_demo";

    var editor, modeInput, select;
    var defaultMode = "swift";

    var modes = [
      "apl", "asciiarmor", "asn.1", "asterisk", "brainfuck", "clike", "clojure", "cmkake",
      "cobol", "coffeescript", "commonlisp", "crystal", "css", "cypher", "d", "dart", "diff",
      "django", "dockerfile", "dtd", "dylan", "ebnf", "ecl", "eiffel", "elm", "erlang", "factor",
      "fcl", "forth", "fortran", "gas", "gfm", "gherkin", "go", "groovy", "haml", "handlebars",
      "haskell", "haskell-literate", "haxe", "htmlembedded", "htmlmixed", "http", "idl", "javascript",
      "jinja2", "jsx", "julia", "livescript", "lua", "markdown", "mathematica", "mbox", "mirc", "mllike",
      "modelica", "mscgen", "mimps", "nginx", "nsis", "ntriples", "octave", "oz", "pascal", "pegjs", "perl",
      "php", "pig", "powershell", "properties", "protobug", "pug", "puppet", "python", "q", "r",
      "rst", "ruby", "rust", "sas", "sass", "scheme", "shell", "sieve", "slim", "smalltalk", "smarty",
      "solr", "soy", "sparql", "spreadsheet", "sql", "stex", "stylus", "swift", "tcl", "textile",
      "tiddlywiki", "tiki", "toml", "tornado", "troff", "ttcn", "ttcn-cfg", "turtle", "twig", "vb",
      "vbscript", "velocity", "verilog", "vhdl", "vue", "webidl", "xml", "xquery", "yacas", "yaml",
      "yaml-frontmatter", "z80"
    ];

    function changeMode(inputMode) {
      var val = inputMode, m, mode, spec;
      if (m = /.+\.([^.]+)$/.exec(val)) {
        var info = CodeMirror.findModeByExtension(m[1]);
        if (info) {
          mode = info.mode;
          spec = info.mime;
        }
      } else if (/\//.test(val)) {
        var info = CodeMirror.findModeByMIME(val);
        if (info) {
          mode = info.mode;
          spec = val;
        }
      } else {
        mode = spec = val;
      }
      if (mode) {
        editor.setOption("mode", spec);
        CodeMirror.autoLoadMode(editor, mode);
        if(window.data) {
          window.data.mode = mode;
        }
        document.getElementById("select").selectedIndex = modes.indexOf(mode);
      } else {
        alert("Could not find a mode corresponding to " + val);
      }
    }

    window.addEventListener("message", function(event){
      if(isDemo) {
        return;
      }

      window.noteText = event.data.text;
      window.noteId = event.data.id;
      window.data = event.data.data || {};
      var mode = window.data.mode;
      if(mode) {
        changeMode(mode);
      }
      if(editor) {
        editor.getDoc().setValue(window.noteText);
      }
    }, false);

    function postMessageToParent() {
      window.parent.postMessage({text: editor.getValue(), data: window.data, id: window.noteId}, '*');
    }

    function onLanguageSelect(event) {
      var language = modes[select.selectedIndex];
      changeMode(language);
      postMessageToParent();
    }

    document.addEventListener("DOMContentLoaded", function(event) {

      if(window.parent != window) {
        window.parent.postMessage({status: "ready"}, '*');
      }

      CodeMirror.modeURL = "/assets/modes/%N/%N.js";
      editor = CodeMirror.fromTextArea(document.getElementById("code"), {
        lineNumbers: true
      });
      editor.setSize("100%", "100%");
      setTimeout(function () {
        changeMode(defaultMode);
      }, 1);

      select = document.getElementById("select");

      var index = 0;
      for(element in modes) {
         var opt = document.createElement("option");
         opt.value = index;
         opt.innerHTML = modes[index];

         select.appendChild(opt);
         index++;
      }

      editor.on("change", function(){
        if(window.parent != window) {
          if(isDemo) {
            return;
          }

          postMessageToParent();
        }
      });
    });
  </script>
</head>
<body>

<div id="wrapper">
<textarea id="code" name="code">
<% if params['action'] == "code_demo" %>
//
//  TipCalculatorModel.swift
//  TipCalculator
//
//  Created by Programmer on 02/25/17.
//

import Foundation

class TipCalculatorModel {

  var total: Double
  var taxPct: Double
  var subtotal: Double {
    get {
      return total / (taxPct + 1)
    }
  }

  init(total: Double, taxPct: Double) {
    self.total = total
    self.taxPct = taxPct
  }

  func calcTipWithTipPct(tipPct: Double) -> Double {
    return subtotal * tipPct
  }

  func returnPossibleTips() -> [Int: Double] {

    let possibleTipsInferred = [0.15, 0.18, 0.20]
    let possibleTipsExplicit:[Double] = [0.15, 0.18, 0.20]

    var retval = [Int: Double]()
    for possibleTip in possibleTipsInferred {
      let intPct = Int(possibleTip*100)
      retval[intPct] = calcTipWithTipPct(possibleTip)
    }
    return retval
  }

}

<% end %>
</textarea>
<div>

<div id="select-wrapper">
  <span id="language-label">Language:</span>
  <select id="select" onchange="onLanguageSelect(event)"></select>
</div>

</body>
</html>
